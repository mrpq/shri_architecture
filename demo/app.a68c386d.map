{"version":3,"sources":["MyFlux/Observer.js","MyFlux/Logger.js","MyFlux/Store.js","MyFlux/Dispatcher.js","app/actions/constants.js","app/configureStore.js","MyFlux/View.js","MyFlux/ActionCreator.js","app/actions/actions.js","app/views/indexView.js","app.js"],"names":["Observer","eventHandlers","eventName","data","eh","find","h","cb","bind","push","Logger","entries","logElem","document","querySelector","logEntry","console","log","onLogUpdate","p","createElement","classList","add","innerHTML","appendChild","logger","Store","initialState","subscribers","state","forEach","s","trigger","sub","LoggingStore","addEntry","Dispatcher","callbacks","action","dispatcher","LoggingDispatcher","JSON","stringify","loggingDispatcher","DATA_SENT_SUCCESS","updateDataCb","payload","emmit","configureStore","store","subscribe","View","params","name","methods","fields","render","init","Object","meth","func","field","value","LoggingView","ActionCreator","dispatch","ac","actionDataSent","createAction","sendToServer","indexView","input","submitBtn","label","onSubmit","event","preventDefault","addEventListener","getState"],"mappings":";;;;;;;;;;;AAAA;;ACAA;AGAO,IAAM4C,gDAAoB,mBAA1B;;AFAP;AGCA,ILKM5C;AGNN,AHOE,ICFIU,kBDEU;ACDd,ADCc,AKJhB,oBJGgB;AAAA,ACLhB;AFOI,AKJJ,SLIST,aAAL,GAAqB,EAArB;ACDA,ADED,SCFMU,OAAL,GAAe,EAAf;AMPJ,ANQI,ASRJ,ALMA,SJESC,OAAL,GAAeC,SAASC,aAAT,CAAuB,SAAvB,CAAf;AACD,AOTH;ACCA;AHDA,4BNUUZ,WAAWC,MAAM;AACvB,AUVJ,ADCA,UTSUC,KAAK,KAAKH,aAAL,CACRI,IADQ,CACH;AAAA,AQXZ,eRWiBC,EAAEJ,SAAF,GCDNa,EDCsBb,QCDZ,CDCT;ACAR,ADAQ,AKVZ,AIFA,OTWe,EAERK,ECDEI,ADDM,CAELH,IAFK,CAEA,CCDX,CAAaC,EDDF,CAAX,CCCA,CAAkBM,QAAlB;AEVJ,AFWIC,ADCAZ,AMbJ,AEEA,AHQA,AIPA,IJOMyC,AIPAwB,KTUClE,IAAH,CCDQc,GAAR,CAAYF,CIFK,AIPA,ORSjB,EIFE8B,AIPAwB,YJOe,AIPA,OJO8B,AIPtB;AFF7B,ANYI,ADCD,AKJgD,AINjDrD,MJM8BsB,IINtBrB,CRSDC,CIH0C,CINjD,CACE,MJK4BoB,EJG5B,CAAiBvB,GIH8B,KJG/C,2DQTF;ARUC,ACZH,AGQmD,AIHjD,MJGsC+B,OAAW,QAAXA,OAAW,GIHlC3C,IAAf;ACLF,ADMC,CALD;ACAA,AFAA,AHQE,IKRI8C,AFAAiB,KAAK,CHQD5B,EKRI,ILQZ,cLKUpC,WAAWK,EUbvB,EVa2B,sBQb3B;ARcI,AUbJ,AFAO,AHQH,AIFJ,INJM6B,AKFO+B,ACMPG,OTOGrE,KSPS,QTOd,CAAmBQ,IAAnB,CAAwB,ECDdM,ADCgBb,MSPI,IRMV,IOZMgE,GAAGE,GRaL,EAAa7D,MAAb,CQbE,CRa1B,6BQbG;ALGL,AFUE,ADCD,AUbH0C,ALQM,AIFJI,MCNIH,EDME,ERME/B,CIJCU,GJIGhB,CSZd,CLQM,AIH4B,CJGjBV,IAAX,EJIiBiB,CEVP,AEMQ0B,OAAlB,KJIQ,CAAuB,GAAvB,CAAV;AEVY,AFWZ3B,ASZJ,ALQI,IEPiB6C,ALAftC,IDWAL,SAAF,CAAYC,GAAZ,CAAgB,WAAhB;AMVF,ANWEH,ACXF,AQDF,ALIE,AIEAoC,QRMIhC,EQNI,ORMN,ECX6B,CDWfR,ASZRmC,QTYN,CSZJ,CAAoB,eAApB,EAAqC,YAAM;APCvC,AFYA,ACZ6B,AQA/B,ALQA,AIFEqB,MCNIpE,CLQD4C,CHROpB,CCALU,EFYAzB,AQNEC,CJET,CKRaoC,ALQF,KFRT,AFYA,CAAazB,ASZIsD,CRAY,AOMbhE,CNNC,EAAjB,IOAW,CLQb,CKRA,CTYE,CAAyBK,CAAzB,CQNO,CAAuB,gBAAvB,CADD,wCPLmB,EAAI;ACC9B,AFYA,ASZD,ALQD,AIFGqD,CJLJ,cIKe3D,OCNH2C,EDMY1C,ICNtB,CAAiBX,IAAjB,IDMa,CAAuB,qBAAvB,CAFL;APLuB,AQEhC,ADMGsE,CCTJ,UDSW5D,SAASC,aAAT,CAAuB,gBAAvB;ANLT,AGTF,ADiBA,AINU,GAHwB,eTWnBd;AORb,ALJE,AOSFsD,SPTO1B,EOSE,SPTP,GAAmB,EKITW,ALJV,UKIF,EAAwB;AAAA,ALHtB,AOSAmC,SPTK7C,KAAL,AOSU,GPTGF,YAAb,GOSmBgD,KAAT,EAAgB;APR3B,AOSGA,YAAMC,cAAN;AFNF,ANUJ,AQHM,IRGAnD,KMVGc,CEOGpC,GRGG,IAAIO,AQHA,EFPf,GAAkB6B,AEOEgC,CRGT,EAAf,EQHmB,CAAWT,IFP1B,CEOE;AFNH,ALFD,AGdF,AIuBMO,mBAAalE,IAAb;AJEN,AIDK,IHfgBgD,ADgBfH,cJESvB,GIFQ,SAAjBuB,cAAiB,GAAM;AEP3B,AFQA,AIPS,GARuB,GJe1BC,QAAQ,yBAAd;AACA,gCAAkBC,SAAlB,CAA4BL,aAAarC,IAAb,CAAkByC,KAAlB,CAA5B;ACjBA,ADkBA,AIDAO,SJCOP,CIDC,IJCR,YIDiBpB,KAAT,EAAgB;AJEzB,AIFyB,CJF1B,OIGY1B,IADc,GACL0B,KADK,CACd1B,IADc;8BNRdI,IAAI;AACZ,AMSA,SAAKkE,ENTApC,GMSL,CAAWd,GJEAyB,EFXX,CAAevC,GMSf,CNTA,CAAoBF,EAApB,sHMSiDJ,IAAjD;ANRD,AMSA,GAnB+B;;ANYhC,AMSAsD,QAAM,gBAAW,OPZN;AACT,AOYA,SAAKe,IPZE,KAAK3C,AOYZ,CAAegD,IPZf,YOYA,CAAgC,OAAhC,EAAyC,KAAKH,QAA9C;APXD,AOYA;AAvB+B,CAAhB,CAAlB,+BFcepC,QAAQ;AAAA,ALDrB;kBOaagC;AFXX,ADJF,aCIS,GDJGlB,MAAZ,EAAoB,KCIH;AACb,ADLgB,cCKXb,UAAL,CAAgB0B,QAAhB,CAAyB,EAAE3B,cAAF,EAAUQ,SAAS3C,IAAnB,EAAzB;AACD,OAFD;AAGD,ADPmB;6BHQXmC,QAAQ;AACf,AGTkB,QAEVe,GHOHhB,CGTa,GAE8Be,KHOhD,CAAetB,AGTG,CAEVuB,IAFU,EHSlB,CAAuB;AAAA,AGTL,QAEJC,OHOe/C,AGTX,GHSc+B,AGPgBc,MHOnB,AGTX,CHSK,AGPTE,OAFI;AHSK,AGTL,OHSlB,CGPuBC,MAFL,GAE8BH,MAF9B,CAEKG,EJMnBrD,IIRc,OJQH;ACEhB,ADDC,AITkB,QAEasD,GJO1B5B,GITa,GAE8BwB,KJOhD,CAAiBtB,AITC,CAEa0B,MJO/B,AITkB,CJSO;AKC7B,ALD6B,AITP,QAEqBC,IAFrB,GJSY1B,AIPkBqB,EJOhBpB,IITd,CAEqByB,EJOT,CAAUvD,CITtB,QJSY,CAAL;AKE7B,ALF6B,OAAzB;AKGJ,ALFG,AIPC,UAAKmD,IAAL,GAAYA,IAAZ;ACUJ;AACA,ALFE,AIPE;AHQJ,AGPIK,WAAO/C,OAAP,CAAe2C,OAAf,EAAwBxB,OAAxB,CAAgC,gBAAkB;ACUtD,ADVsD;ACWtD,ADXsD,UAAhB6B,IAAgB;ACYtD,AJJA,AGRsD,IHQhDpB,MGRsCqB,IAAU,GHQnC,IAAIxB,UAAJ,EAAnB;AIKA,kBJJeG;AIKf,ADbM,YAAKoB,IAAL,IAAaC,KAAKpD,IAAL,OAAb;ACcN,AJJA,AGTK,KAFD;ACgBJ;AACA,ADbI,IHQEgC,0BDAMP,KAAK;AKMjB,ALLI,AIRAyB,WJQK9B,AIREjB,OAAP,CAAe4C,GJQf,CAAiB9C,EIRjB,EJQA,AIRuBqB,CJQDG,GAAtB,GIRA,CAA+B,iBAAoB;ACcvD,ALLG,AIToD;AHQrD,AGRqD,UAAlB4B,KAAkB,gBHQvC;AAAA,AGRuC,UAAXC,KAAW;kBCzBlCE;AJiCL,AGPV,YAAKH,KAAL,IAAcC,KAAd;AACD,KAFD;AHUA,ADEJ,UCFSrC,MAAL;AAFY,AGJZ;AHOD,AGNC,UAAK+B,MAAL,GAAcA,OAAOhD,IAAP,OAAd;IJQS0B,uBAAAA;AINT;AACAuB,SAAKjD,IAAL;AJMF,AIzBoB,0BJyBW,ICDrBD,IAAI;AACZ,ADA6B,AIL9B,QJKWoB,ECAJZ,UDAuB,uEAAJ,EAAI,iFCA7B;AACA,WAAKU,MAAL,CAAYU,QAAZ,CAAqBpB,QAArB;AACA,ADF6B,sICEbR,EAAhB;AACD;ADH8B,+BIHpB,6FJIHoB,YADuB;AIF7B,yBAAgB,KAAK0B,IAArB;AJIA,AIHD,UJGM5B,MAAL,aCGOa,QAAQ;AACf,ADN6B,UCMvBvB,6LAA8D0B,KAAKC,SAAL,CAClEJ,MADkE,CAApE;AAGA,ADND,WCMMb,MAAL,CAAYU,QAAZ,CAAqBpB,QAArB;AACA,qIAAeuB,MAAf;AACD;;AGTH,0BJGQpC,WAAW;AACf,UAAMa,iMAAmDb,SAAzD;AACA,ECd4BkC,SDcvBX,MAAL,CAAYU,QAAZ,CAAqBpB,QAArB;AACA,kBI9CiBoC,sGJ8CLjD,SAAZ;ACMG,ADLJ,ICKUyC,gDAAoB,IAAIH,iBAAJ,EAA1B;AACP,IGZauB,sBAAAA;;AHcb,8BDNY9B,KAAK;AACb,AIRF,UJQQlB,WAAckB,EIRVmB,CJQJ,KIRR,EAAoB,2IJQlB;AACA,AITkB,WJSb3B,MAAL,CAAYU,QAAZ,CAAqBpB,QAArB;AACA,4HAAgBkB,GAAhB;AACD,AIXmB,2HACZmB,MADY;;AAElB,WAAK3B,MAAL;AACA,QAAM+B,SAAS,OAAKA,MAApB;AACA,EJT8B9B,SISzB8B,MAAL,GAAc,YAAa;AACzB,UAAMzC,uTAAN;AACA,aAAKU,KJQIC,CIRT,CAAYS,QAAZ,CAAqBpB,QAArB;AACAyC;AACD,KAJD;AAJkB;AASnB;;;;4BAEOtD,WAAW;AACjB,UAAMa,6BAAiB,IAAjB,yHAA8Cb,SAA9C,OAAN;AACA,WAAKuB,MAAL,CAAYU,QAAZ,CAAqBpB,QAArB;AACA,wHAAcb,SAAd;AACD;;;8BAESA,WAAWK,IAAI;AACvB,UAAMQ,WAAc,IAAd,+MAA2Db,SAA3D,QAAN;AACA,uBAAOiC,QAAP,CAAgBpB,QAAhB;AACA,0HAAgBb,SAAhB,EAA2BK,EAA3B;AACD;;;;EAtB8B4C","file":"app.a68c386d.map","sourcesContent":["/**\n * Класс от которого наследует View. Предоставляет API для подписки на события\n * и возможность триггерить события на экземплярах.\n *\n * @class Observer\n */\nclass Observer {\n  constructor() {\n    this.eventHandlers = [];\n  }\n  trigger(eventName, data) {\n    const eh = this.eventHandlers\n      .find(h => h.eventName === eventName)\n      .cb.bind(this);\n    eh(data);\n  }\n\n  subscribe(eventName, cb) {\n    this.eventHandlers.push({ eventName, cb });\n  }\n}\n\nexport default Observer;\n","/**\n * Вспомогательный класс для логирования потоков управления и данных в приложении.\n *\n * @class Logger\n */\nclass Logger {\n  constructor() {\n    this.entries = [];\n    this.logElem = document.querySelector(\".js-log\");\n  }\n\n  addEntry(logEntry) {\n    this.entries.push(logEntry);\n    console.log(logEntry);\n    this.onLogUpdate(logEntry);\n  }\n\n  onLogUpdate(logEntry) {\n    const p = document.createElement(\"p\");\n    p.classList.add(\"log-entry\");\n    p.innerHTML = logEntry;\n    this.logElem.appendChild(p);\n  }\n}\n\nconst logger = new Logger();\n\nexport default logger;\n","import Observer from \"./Observer\";\nimport logger from \"./Logger\";\n\n/**\n * Создает хранилища для данных\n *\n * @class Store\n */\nclass Store {\n  constructor(initialState = {}) {\n    this.subscribers = [];\n    this.state = initialState;\n  }\n\n  /**\n   * API для получения состояни store\n   *\n   * @returns {object} store.state\n   * @memberof Store\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Метод для оповещения подписчиков о событиях произошедших в store\n   *\n   * @param {string} eventName имя события\n   * @memberof Store\n   */\n  emmit(eventName) {\n    this.subscribers.forEach(s => s.trigger(eventName));\n  }\n\n  /**\n   * API для подписки Views на события Store\n   *\n   * @param {View} sub - объект класса View\n   * @memberof Store\n   */\n  subscribe(sub) {\n    this.subscribers.push(sub);\n  }\n}\n\n// LoggingStore - тот же самый store, с методами обернутыми для логгирования.\nexport class LoggingStore extends Store {\n  constructor(initialState = {}) {\n    super(initialState);\n    this.logger = logger;\n  }\n\n  emmit(eventName) {\n    const logEntry = `Store отправляет подписчикам событие ${eventName}`;\n    this.logger.addEntry(logEntry);\n    super.emmit(eventName);\n  }\n\n  subscribe(sub) {\n    const logEntry = `${sub} подписывается на события Store`;\n    this.logger.addEntry(logEntry);\n    super.subscribe(sub);\n  }\n}\n\nexport default Store;\n","import logger from \"./Logger\";\n\n/**\n * Диспатчер. Отправляет actions в store\n *\n * @class Dispatcher\n */\nclass Dispatcher {\n  constructor() {\n    this.callbacks = [];\n  }\n\n  /**\n   * API для подписки store на события.\n   *\n   * @param {function} cb Колбэк для изменения стейта store. Колбэк ожидает как минимум один агрумент\n   * вида {action: 'ACTION_NAME', payload: {data}}\n   * @memberof Dispatcher\n   */\n  subscribe(cb) {\n    this.callbacks.push(cb);\n  }\n\n  /**\n   * Метод для отправки экшнов в store. Фактически выполняет колбэки предоставленные\n   * хранилищами, передавая им action в качестве агрумента\n   *\n   * @param {object} action\n   * @memberof Dispatcher\n   */\n  dispatch(action) {\n    this.callbacks.forEach(cb => cb(action));\n  }\n}\n\n// Диспатчер один для всех хранилищ, поэтому инициализируется единожды.\nconst dispatcher = new Dispatcher();\nexport default dispatcher;\n\n// LoggingDispatcher - тот же самый диспатчер, с методами обернутыми для логгирования.\nclass LoggingDispatcher extends Dispatcher {\n  constructor() {\n    super();\n    this.logger = logger;\n  }\n\n  subscribe(cb) {\n    const logEntry = `Store подписывается на события dispatcher`;\n    this.logger.addEntry(logEntry);\n    super.subscribe(cb);\n  }\n\n  dispatch(action) {\n    const logEntry = `Dispatcher диспатчит в подписанные store's экшн ${JSON.stringify(\n      action\n    )}`;\n    this.logger.addEntry(logEntry);\n    super.dispatch(action);\n  }\n}\n\nexport const loggingDispatcher = new LoggingDispatcher();\n// dispatcher.setLogger(logger);\n\n// export default Dispatcher;\n","export const DATA_SENT_SUCCESS = \"DATA_SENT_SUCCESS\";\n","// import Store from \"../MyFlux/Store\";\nimport { LoggingStore } from \"../MyFlux/Store\";\n// import dispatcher from \"../MyFlux/Dispatcher\";\nimport { loggingDispatcher } from \"../MyFlux/Dispatcher\";\nimport { DATA_SENT_SUCCESS } from \"./actions/constants\";\n\n/**\n * Колбэк для обновления стейта хранилища.\n *\n * @param {object} { action, payload } - экшн\n */\nconst updateDataCb = function({ action, payload }) {\n  switch (action) {\n    case DATA_SENT_SUCCESS:\n      this.state.data = payload;\n    default:\n  }\n  this.emmit(\"store_updated\");\n};\n\n/**\n * Конфигурирует хранилище, подписывает на события диспатчера\n *\n * @returns\n */\nconst configureStore = () => {\n  const store = new LoggingStore();\n  loggingDispatcher.subscribe(updateDataCb.bind(store));\n  return store;\n};\n\nexport default configureStore;\n","import Observer from \"./Observer\";\nimport logger from \"./Logger\";\n\n/**\n * Создает View\n *\n * @class View\n * @extends {Observer}\n */\nexport default class View extends Observer {\n  /**\n   * Creates an instance of View.\n   * @param {string} params.name Имя для view\n   * @param {object} params.methods Объект вида {'имя_метода': функция}\n   *                                используется для определения публичного API view\n   * @param {object} params.fields Объект вида {'имя_поля': значение}\n   *                               используется для установки полей view.\n   *                               В полях можно хранить какие угодно данные.\n   * @param {fucntion} params.render Функция для отрисовки view на странице\n   * @param {init} params.init Функция для инициализации view. Здесь подписываемся на события DOM, например\n   * @memberof View\n   */\n  constructor(params) {\n    super();\n    const { name, methods, fields, render, init } = params;\n    this.name = name;\n\n    // Устанавливаем методы view\n    Object.entries(methods).forEach(([meth, func]) => {\n      this[meth] = func.bind(this);\n    });\n\n    // Устанавливаем поля view\n    Object.entries(fields).forEach(([field, value]) => {\n      this[field] = value;\n    });\n\n    // Устанавливаем view.render()\n    this.render = render.bind(this);\n\n    // Инициализируем view()\n    init.bind(this)();\n  }\n\n  toString() {\n    return `View \"${this.name}\"`;\n  }\n}\n\n// LoggingView - тот же самый view, с методами обернутыми для логгирования.\nexport class LoggingView extends View {\n  constructor(params) {\n    super(params);\n    this.logger = logger;\n    const render = this.render;\n    this.render = (...args) => {\n      const logEntry = `${this} вызывает свой метод \"render\" для перерисовки с новыми данными`;\n      this.logger.addEntry(logEntry);\n      render(...args);\n    };\n  }\n\n  trigger(eventName) {\n    const logEntry = `На ${this} триггерится событие \"${eventName}\"`;\n    this.logger.addEntry(logEntry);\n    super.trigger(eventName);\n  }\n\n  subscribe(eventName, cb) {\n    const logEntry = `${this} устанавливает обратотчик на событие \"${eventName}\".`;\n    logger.addEntry(logEntry);\n    super.subscribe(eventName, cb);\n  }\n}\n","import logger from \"./Logger\";\n\n/**\n * Вспомогательный класс для создания экшнов\n *\n * @export\n * @class ActionCreator\n */\nexport default class ActionCreator {\n  /**\n   * Creates an instance of ActionCreator.\n   * @param {Dispatcher} dispatcher Диспатчер\n   * @memberof ActionCreator\n   */\n  constructor(dispatcher) {\n    this.dispatcher = dispatcher;\n  }\n\n  /**\n   *\n   *\n   * @param {string} action Название экшна (напр ADD_TODO)\n   * @returns {function} Экшн креэйтор. В качестве агрумента ожидает данные для payload\n   * @memberof ActionCreator\n   */\n  createAction(action) {\n    return data => {\n      this.dispatcher.dispatch({ action, payload: data });\n    };\n  }\n}\n\n// export class LoggerActionCreator extends ActionCreator {\n//   constructor(dispatcher) {\n//     super(dispatcher);\n//     this.logger = logger;\n//   }\n\n//   createAction(action) {\n//     return data => {\n//       const logEntry = `Dispatcher диспатчит экшн ${JSON.stringify({\n//         action,\n//         payload: data\n//       })}`;\n//       this.logger.addEntry(logEntry);\n//     };\n//   }\n// }\n","import ActionCreator from \"../../MyFlux/ActionCreator\";\nimport { loggingDispatcher } from \"../../MyFlux/Dispatcher\";\n\nimport { DATA_SENT_SUCCESS } from \"./constants\";\nconst ac = new ActionCreator(loggingDispatcher);\nexport const actionDataSent = ac.createAction(DATA_SENT_SUCCESS);\n","// import View from \"../../MyFlux/View\";\nimport { LoggingView } from \"../../MyFlux/View\";\nimport { actionDataSent } from \"../actions/actions\";\n\nconst sendToServer = data => {\n  console.log(\n    \"Притворяемся, что отправляем данные на сервер... Данные успешно отправлены\"\n  );\n  actionDataSent(data);\n};\n\nconst indexView = new LoggingView({\n  name: \"MyView\",\n\n  fields: {\n    input: document.querySelector(\".js-view-input\"),\n    submitBtn: document.querySelector(\".js-view-submit-btn\"),\n    label: document.querySelector(\".js-view-label\")\n  },\n  methods: {\n    onSubmit: function(event) {\n      event.preventDefault();\n      const data = this.input.value;\n      sendToServer(data);\n    }\n  },\n\n  render: function(state) {\n    const { data } = state;\n    this.label.innerHTML = `Сервер принял данные: \"${data}\"`;\n  },\n\n  init: function() {\n    this.submitBtn.addEventListener(\"click\", this.onSubmit);\n  }\n});\n\nexport default indexView;\n","import configureStore from \"./app/configureStore\";\nimport indexView from \"./app/views/indexView\";\n\n// создаем store\nconst store = configureStore();\n// view подписывается на события store\nstore.subscribe(indexView);\n// view устанавливает обработчик события \"store_updated\"\nindexView.subscribe(\"store_updated\", () => {\n  const data = store.getState();\n  indexView.render(data);\n});\n"]}